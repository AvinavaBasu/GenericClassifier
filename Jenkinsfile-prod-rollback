def gc_golden_image

pipeline {
    agent {
        label 'gc-packer-agent'
    }

  environment {
    SVC_ACC                   = credentials('svc_account_name')
    ARTIFACTORY_API_TOKEN     = credentials('artifactory_api_token')
    DOCKER_REGISTRY           = "docker-genericlass-parity-local.rt.artifactory.tio.systems"
    GC_PROD_CONTAINER_NAME   = "gc"

	
	PROD_ACCOUNT_ID           = '723926235764'
    PROD_CROSS_ACCOUNT_ROLE   = 'mhub-platform-prod-ip-build-agent-role'
    PROD_ROLE_ARN             = "arn:aws:iam::${PROD_ACCOUNT_ID}:role/${PROD_CROSS_ACCOUNT_ROLE}"
    PROD_ROLE_SESSION         = "jenkins"
	
	PROD_GOLDEN                = '$(aws ssm get-parameter --name /gc/prod/gc_golden_dockerTag --region us-east-1 --with-decryption --output text --query Parameter.Value)'
	
  }

  stages {

    stage('Rollback for PROD 1') {
      options {
        timeout(time: 60, unit: 'MINUTES')
      }
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                input message: 'Are you sure you want to rollback?'
                echo 'Rollback in progress...'
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Rollback for PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")

                    sh '''
                        ASSUME_ROLE_OUTPUT=\$(aws sts assume-role --role-arn "$PROD_ROLE_ARN" --role-session-name "$PROD_ROLE_SESSION")
                        ASSUME_ROLE_ENVIRONMENT=\$(echo \$ASSUME_ROLE_OUTPUT | jq -r '.Credentials | .["AWS_ACCESS_KEY_ID"] = .AccessKeyId | .["AWS_SECRET_ACCESS_KEY"] = .SecretAccessKey | .["AWS_SECURITY_TOKEN"] = .SessionToken | del(.AccessKeyId, .SecretAccessKey, .SessionToken, .Expiration) | to_entries[] | "export \\(.key)=\\(.value)"')
                        eval \$ASSUME_ROLE_ENVIRONMENT
					'''
					
					withAWS(roleAccount: "$PROD_ACCOUNT_ID", role:"$PROD_CROSS_ACCOUNT_ROLE") {
						
                        sh """
                            eval `ssh-agent -s`
                            KEYFILE=`mktemp`
                            chmod 600 \${KEYFILE}
                            aws ssm get-parameter --name /gc/prod/gc_prod_keypair --with-decryption --region us-east-1 \
                                --query Parameter.Value --output text >  \${KEYFILE}
                            ssh-add \${KEYFILE}
                            rm \${KEYFILE}
                            IP=`aws ssm get-parameter --name /gc/prod/gc_1a_ip --with-decryption --region us-east-1 --query Parameter.Value --output text`
                            ssh -o StrictHostKeyChecking=no centos@\${IP} '''
                                docker login ${DOCKER_REGISTRY} -u ${SVC_ACC} -p ${ARTIFACTORY_API_TOKEN};
                                docker image pull ${DOCKER_REGISTRY}/gc:${PROD_GOLDEN};
                                docker stop ${GC_PROD_CONTAINER_NAME};								
                                docker rm -f ${GC_PROD_CONTAINER_NAME};
                                sudo docker run -d -v /opt/ml/model/:/opt/ml/model/ -p 8080:8080 -e MODEL_SERVER_WORKERS=1 -e MODEL_SERVER_TIMEOUT=600 --name ${GC_PROD_CONTAINER_NAME} ${DOCKER_REGISTRY}/gc:${PROD_GOLDEN} serve;
                                '''
                            eval `ssh-agent -k`				
                        """						
                    }
					

                } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Rollback for PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Rollback for PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")			
        }
      }     
    }
    
    stage('Rollback for PROD 2') {
      options {
        timeout(time: 60, unit: 'MINUTES')
      }
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Rollback for PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
			
			        sh '''
                        ASSUME_ROLE_OUTPUT=\$(aws sts assume-role --role-arn "$PROD_ROLE_ARN" --role-session-name "$PROD_ROLE_SESSION")
                        ASSUME_ROLE_ENVIRONMENT=\$(echo \$ASSUME_ROLE_OUTPUT | jq -r '.Credentials | .["AWS_ACCESS_KEY_ID"] = .AccessKeyId | .["AWS_SECRET_ACCESS_KEY"] = .SecretAccessKey | .["AWS_SECURITY_TOKEN"] = .SessionToken | del(.AccessKeyId, .SecretAccessKey, .SessionToken, .Expiration) | to_entries[] | "export \\(.key)=\\(.value)"')
                        eval \$ASSUME_ROLE_ENVIRONMENT
					'''
					
					withAWS(roleAccount: "$PROD_ACCOUNT_ID", role:"$PROD_CROSS_ACCOUNT_ROLE") {
						
                        sh """
                            eval `ssh-agent -s`
                            KEYFILE=`mktemp`
                            chmod 600 \${KEYFILE}
                            aws ssm get-parameter --name /gc/prod/gc_prod_keypair --with-decryption --region us-east-1 \
                                --query Parameter.Value --output text >  \${KEYFILE}
                            ssh-add \${KEYFILE}
                            rm \${KEYFILE}
                            IP=`aws ssm get-parameter --name /gc/prod/gc_1b_ip --with-decryption --region us-east-1 --query Parameter.Value --output text`
                            ssh -o StrictHostKeyChecking=no centos@\${IP} '''
                                docker login ${DOCKER_REGISTRY} -u ${SVC_ACC} -p ${ARTIFACTORY_API_TOKEN};
                                docker image pull ${DOCKER_REGISTRY}/gc:${PROD_GOLDEN};
                                docker stop ${GC_PROD_CONTAINER_NAME};								
                                docker rm -f ${GC_PROD_CONTAINER_NAME};
                                sudo docker run -d -v /opt/ml/model/:/opt/ml/model/ -p 8080:8080 -e MODEL_SERVER_WORKERS=1 -e MODEL_SERVER_TIMEOUT=600 --name ${GC_PROD_CONTAINER_NAME} ${DOCKER_REGISTRY}/gc:${PROD_GOLDEN} serve;
                                '''
                            eval `ssh-agent -k`				
                        """						
                    }

                
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Rollback for PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Rollback for PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")			
        }
      }     
    }
  }
}
