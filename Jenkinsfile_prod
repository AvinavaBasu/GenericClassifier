def gcTag
@Library('parityGlobalLibrary@1.8.0') _
pipeline {
    agent {
        label 'gc-packer-agent'
    }

  environment {
    MAJOR                     = '1'
    MINOR                     = '2'
    VERSION                   = "v${MAJOR}.${MINOR}"
    WORKSPACE                 = "${env.WORKSPACE}"
    BUILD_TS                  = "${GIT_COMMIT}"
    SVC_ACC                   = credentials('svc_account_name')
    ARTIFACTORY_API_TOKEN     = credentials('artifactory_api_token')
    SONAR_SCANNER_TOKEN       = credentials('sonar_api_token')
    DOCKER_REGISTRY           = "docker-genericlass-parity-local.rt.artifactory.tio.systems"
    IMAGE_ID                  = "gc"
    IMAGE_NAME                = "${DOCKER_REGISTRY}/${IMAGE_ID}"
    IMAGE_TAG_PROD            = "${VERSION}-${BUILD_TS}-prod"
    IMAGE_TAG_PROD_GOLDEN     = "${VERSION}-${BUILD_TS}-prod-golden"
    ARTIFACTORY_CREDENTIAL    = "artifactory_svc_credential"
    GC_CONTAINER_NAME         = "gc"
    DOCKER_TAG                = "${VERSION}.${GIT_BRANCH}.${GIT_COMMIT}"
    SSM_STORE_PROD            = '/gc/prod/gc_latest_dockerTag'
    SSM_STORE_PROD_GOLDEN     = '/gc/prod/gc_golden_dockerTag'

    PROD_ACCOUNT_ID           = '723926235764'
    PROD_CROSS_ACCOUNT_ROLE   = 'mhub-platform-prod-ip-build-agent-role'
    PROD_ROLE_ARN             = "arn:aws:iam::${PROD_ACCOUNT_ID}:role/${PROD_CROSS_ACCOUNT_ROLE}"
    PROD_ROLE_SESSION         = "jenkins"

    UAT_GOLDEN                = '$(aws ssm get-parameter --name /gc/uat/gc_golden_dockerTag --region us-east-1 --with-decryption --output text --query Parameter.Value)'
  }

  stages {

      stage('Deploy to PROD 1') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                input message: 'Deploy to PROD environment 1?'
                echo 'Deploying to PROD environment...'
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Deploy to PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")


                    script {
                        docker.withRegistry("https://${DOCKER_REGISTRY}/", "${ARTIFACTORY_CREDENTIAL}") {
                        gcTag = docker.image("${IMAGE_NAME}:${UAT_GOLDEN}")
                        gcTag.pull()
                        gcTag.push("${IMAGE_TAG_PROD}")
                    }
                
                    sh '''
                    ASSUME_ROLE_OUTPUT=\$(aws sts assume-role --role-arn "$PROD_ROLE_ARN" --role-session-name "$PROD_ROLE_SESSION")
                    ASSUME_ROLE_ENVIRONMENT=\$(echo \$ASSUME_ROLE_OUTPUT | jq -r '.Credentials | .["AWS_ACCESS_KEY_ID"] = .AccessKeyId | .["AWS_SECRET_ACCESS_KEY"] = .SecretAccessKey | .["AWS_SECURITY_TOKEN"] = .SessionToken | del(.AccessKeyId, .SecretAccessKey, .SessionToken, .Expiration) | to_entries[] | "export \\(.key)=\\(.value)"')
                    eval \$ASSUME_ROLE_ENVIRONMENT
                    aws ssm put-parameter --name "${SSM_STORE_PROD}" --value "${IMAGE_TAG_PROD}" --type SecureString --overwrite --region us-east-1
                    aws sts get-caller-identity
                    '''
                    
                    withAWS(roleAccount: "$PROD_ACCOUNT_ID", role:"$PROD_CROSS_ACCOUNT_ROLE") {
                        
                        sh """
                            eval `ssh-agent -s`
                            KEYFILE=`mktemp`
                            chmod 600 \${KEYFILE}
                            aws ssm get-parameter --name /gc/prod/gc_prod_keypair --with-decryption --region us-east-1 \
                                --query Parameter.Value --output text >  \${KEYFILE}
                            ssh-add \${KEYFILE}
                            rm \${KEYFILE}
                            IP=`aws ssm get-parameter --name /gc/prod/gc_1a_ip --with-decryption --region us-east-1 --query Parameter.Value --output text`
                            ssh -o StrictHostKeyChecking=no centos@\${IP} '''
                                set -ex
                                docker login ${DOCKER_REGISTRY} -u ${SVC_ACC} -p ${ARTIFACTORY_API_TOKEN};
                                docker image pull ${DOCKER_REGISTRY}/gc:${IMAGE_TAG_PROD};
                                docker stop ${GC_CONTAINER_NAME};
                                docker rm -f ${GC_CONTAINER_NAME};
                                sudo docker run -d -v /opt/ml/model/:/opt/ml/model/ -p 8080:8080 -e MODEL_SERVER_WORKERS=1 -e MODEL_SERVER_TIMEOUT=600 --name ${GC_CONTAINER_NAME} ${DOCKER_REGISTRY}/gc:${IMAGE_TAG_PROD} serve;
                                '''
                            eval `ssh-agent -k`                
                        """
                    }
                    
                }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Deploy to PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Deploy to PROD 1. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")            
        }
      }     
    }

    stage('Deploy to PROD 2') {
      options {
        timeout(time: 30, unit: 'MINUTES')
      }
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                input message: 'Deploy to PROD environment 2?'
                echo 'Deploying to PROD environment...'
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Deploy to PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                
                    sh '''
                    ASSUME_ROLE_OUTPUT=\$(aws sts assume-role --role-arn "$PROD_ROLE_ARN" --role-session-name "$PROD_ROLE_SESSION")
                    ASSUME_ROLE_ENVIRONMENT=\$(echo \$ASSUME_ROLE_OUTPUT | jq -r '.Credentials | .["AWS_ACCESS_KEY_ID"] = .AccessKeyId | .["AWS_SECRET_ACCESS_KEY"] = .SecretAccessKey | .["AWS_SECURITY_TOKEN"] = .SessionToken | del(.AccessKeyId, .SecretAccessKey, .SessionToken, .Expiration) | to_entries[] | "export \\(.key)=\\(.value)"')
                    eval \$ASSUME_ROLE_ENVIRONMENT
                    '''
                    
                    withAWS(roleAccount: "$PROD_ACCOUNT_ID", role:"$PROD_CROSS_ACCOUNT_ROLE") {
                        
                        sh """
                            eval `ssh-agent -s`
                            KEYFILE=`mktemp`
                            chmod 600 \${KEYFILE}
                            aws ssm get-parameter --name /gc/prod/gc_prod_keypair --with-decryption --region us-east-1 \
                                --query Parameter.Value --output text >  \${KEYFILE}
                            ssh-add \${KEYFILE}
                            rm \${KEYFILE}
                            IP=`aws ssm get-parameter --name /gc/prod/gc_1b_ip --with-decryption --region us-east-1 --query Parameter.Value --output text`
                            ssh -o StrictHostKeyChecking=no centos@\${IP} '''
                                set -ex
                                docker login ${DOCKER_REGISTRY} -u ${SVC_ACC} -p ${ARTIFACTORY_API_TOKEN};
                                docker image pull ${DOCKER_REGISTRY}/gc:${IMAGE_TAG_PROD};
                                docker stop ${GC_CONTAINER_NAME};
                                docker rm -f ${GC_CONTAINER_NAME};
                                sudo docker run -d -v /opt/ml/model/:/opt/ml/model/ -p 8080:8080 -e MODEL_SERVER_WORKERS=1 -e MODEL_SERVER_TIMEOUT=600 --name ${GC_CONTAINER_NAME} ${DOCKER_REGISTRY}/gc:${IMAGE_TAG_PROD} serve;
                                '''
                            eval `ssh-agent -k`                
                        """
                    }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Deploy to PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Deploy to PROD 2. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")            
        }
      }     
    }

    stage('Wait prior to performing Smoke Testing in PROD') {
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Wait before Smoke Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                script {
                    sh '''
                    sleep 60
                    '''
                }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Wait before Smoke Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e                   
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Wait before Smoke Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")            
        }
      }     
    }

    stage('Perform Smoke Testing after deploy to PROD') {
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Smoke Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                script {
                    sh '''
                    cd test
                    bash ./run_tests_jenkins.sh smoke_tests prod
                    '''
                }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Smoke Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Smoke Testing. Job '${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}'")            
        }
      } 
    }

    stage('Perform Regression Testing after deploy to PROD') {
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Regression Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                script {
                    sh '''
                    cd test
                    bash ./run_tests_jenkins.sh regression prod
                    '''
                }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Regression Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Regression Testing. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")            
        }
      }
      post {
        always {
          junit 'test/*prod_reports.xml'
          script {
            sh '''
              cd test
              for i in *;do if [[ $i == *.txt || $i == *.csv ]]; then curl -u ${SVC_ACC}:${ARTIFACTORY_API_TOKEN} -X PUT "https://rt.artifactory.tio.systems/artifactory/docker-genericlass-parity-local/gc_reports/prod/${BUILD_NUMBER}/" -T $i;fi;done;
              rm ${WORKSPACE}/test/*.csv || true
              rm ${WORKSPACE}/test/*.log || true
            '''
          }
        }
      }     
    }

    stage('Tag as Golden PROD Image') {
      options {
        timeout(time: 3, unit: 'DAYS')
      }
      when {
            branch 'master'
      }
      steps {
        script {
            try {
                input message: 'Tag as Golden PROD Image?'
                echo 'Tagging as Golden PROD Image...'
                slackSend (color: "#FFFF00", channel: '#electron_gc_squad_ci', message: "STARTED Tag as Golden PROD Image. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")

                    script {
                        docker.withRegistry("https://${DOCKER_REGISTRY}/", "${ARTIFACTORY_CREDENTIAL}") {
                        gcTag = docker.image("${IMAGE_NAME}:${IMAGE_TAG_PROD}")
                        gcTag.pull()
                        gcTag.push("${IMAGE_TAG_PROD_GOLDEN}")
                    }
                
                    sh '''
                        ASSUME_ROLE_OUTPUT=\$(aws sts assume-role --role-arn "$PROD_ROLE_ARN" --role-session-name "$PROD_ROLE_SESSION")
                        ASSUME_ROLE_ENVIRONMENT=\$(echo \$ASSUME_ROLE_OUTPUT | jq -r '.Credentials | .["AWS_ACCESS_KEY_ID"] = .AccessKeyId | .["AWS_SECRET_ACCESS_KEY"] = .SecretAccessKey | .["AWS_SECURITY_TOKEN"] = .SessionToken | del(.AccessKeyId, .SecretAccessKey, .SessionToken, .Expiration) | to_entries[] | "export \\(.key)=\\(.value)"')
                        eval \$ASSUME_ROLE_ENVIRONMENT
                        aws ssm put-parameter --name "${SSM_STORE_PROD_GOLDEN}" --value "${IMAGE_TAG_PROD_GOLDEN}" --type SecureString --overwrite --region us-east-1
                    '''
                }
            } catch (e)     {
                   slackSend (color: "danger",channel: '#electron_gc_squad_ci', message: "FAILED Tag as Golden PROD Image. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")
                   throw e
            }
            slackSend (color: "good", channel: '#electron_gc_squad_ci', message: "COMPLETED Tag as Golden PROD Image. Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}")            
        }
      }     
    }

    }
  }